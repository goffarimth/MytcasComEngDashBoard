import streamlit as st
import pandas as pd
import altair as alt

# р╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е
df = pd.read_excel("result_tcas_20250728_002531.xlsx")

st.set_page_config(page_title="Dashboard р╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕гр╕зр╕┤р╕ир╕зр╕Бр╕гр╕гр╕бр╕Др╕нр╕бр╕п", layout="wide")

# ==== TCAS68 STYLE (CSS) ====
st.markdown("""
    <style>
        /* р╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕Щр╣Йр╕▓ */
        body {
            background-color: #e3f2fd;
        }

        /* р╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕лр╕ер╕▒р╕Б */
        .main {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 1rem;
        }

        /* р╣Бр╕Цр╕Ър╕Фр╣Йр╕▓р╕Щр╕Вр╣Йр╕▓р╕З */
        .sidebar .sidebar-content {
            background-color: #01579b;
            color: white;
        }

        /* р╕Хр╕▒р╕зр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕нр╣Гр╕Щ sidebar */
        .sidebar .sidebar-content h1, 
        .sidebar .sidebar-content h2, 
        .sidebar .sidebar-content label, 
        .sidebar .sidebar-content span,
        .sidebar .sidebar-content .stTextInput>div>div>input {
            color: white !important;
        }

        /* р╕Ыр╕╕р╣Ир╕б */
        .stButton>button {
            background-color: #00acc1;
            color: white;
            border-radius: 10px;
            font-weight: bold;
        }

        .stButton>button:hover {
            background-color: #00838f;
            color: white;
        }

        /* Expander */
        .streamlit-expanderHeader {
            font-weight: bold;
            color: #01579b;
        }
    </style>
""", unsafe_allow_html=True)

# ==== HEADER ====
st.title("ЁЯОУ Dashboard р╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕гр╕зр╕┤р╕ир╕зр╕Бр╕гр╕гр╕бр╕Др╕нр╕бр╕Юр╕┤р╕зр╣Ар╕Хр╕нр╕гр╣М р╣Бр╕ер╕░ AI")
st.markdown("р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б [mytcas.com](https://www.mytcas.com)")

# ==== FILTERS (SIDEBAR) ====
st.sidebar.header("ЁЯФН р╕Хр╕▒р╕зр╕Бр╕гр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е")

# 1. р╕Др╣Йр╕Щр╕лр╕▓р╕Фр╣Йр╕зр╕вр╕Др╕│р╕Др╣Йр╕Щр╣Гр╕Щр╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г
search_text = st.sidebar.text_input("ЁЯФО р╕Др╣Йр╕Щр╕лр╕▓р╕Ир╕▓р╕Бр╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г/р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в/р╕Др╕Ур╕░", "")

# 2. р╣Ар╕ер╕╖р╕нр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕кр╕▓р╕Вр╕▓р╕зр╕┤р╕Кр╕▓
selected_saka = st.sidebar.selectbox("ЁЯУЩ р╣Ар╕ер╕╖р╕нр╕Бр╕кр╕▓р╕Вр╕▓р╕зр╕┤р╕Кр╕▓", ["р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"] + sorted(df["р╕Др╕│р╕Др╣Йр╕Щ"].unique()))

# 3. р╣Ар╕ер╕╖р╕нр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г
selected_course_type = st.sidebar.selectbox("ЁЯУШ р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г", ["р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"] + sorted(df["р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"].unique()))

# 4. р╣Ар╕ер╕╖р╕нр╕Бр╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в
selected_univ = st.sidebar.selectbox("ЁЯПл р╣Ар╕ер╕╖р╕нр╕Бр╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в", ["р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"] + sorted(df["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в"].unique()))

# ==== APPLY FILTER ====
filtered_df = df.copy()

if search_text:
    filtered_df = filtered_df[
        filtered_df["р╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"].str.contains(search_text, case=False, na=False) |
        (filtered_df["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в"].str.contains(search_text, case=False, na=False) |
         filtered_df["р╕Др╕Ур╕░"].str.contains(search_text, case=False, na=False))]

if selected_course_type != "р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф":
    filtered_df = filtered_df[filtered_df["р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"] == selected_course_type]

if selected_univ != "р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф":
    filtered_df = filtered_df[filtered_df["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в"] == selected_univ]

if selected_saka != "р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф":
    filtered_df = filtered_df[filtered_df["р╕Др╕│р╕Др╣Йр╕Щ"] == selected_saka]

# ==== PREPARE DISPLAY ====
filtered_df["р╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"] = filtered_df["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в"] + " | " + filtered_df["р╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"]
filtered_df = filtered_df.sort_values(by="р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕в", ascending=True)

# ==== BAR CHART ====
st.subheader("ЁЯУК р╕Бр╕гр╕▓р╕Яр╣Бр╕кр╕Фр╕Зр╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╕Вр╕нр╕Зр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г (р╕Ър╕▓р╕Ч/р╣Ар╕Чр╕нр╕б)")
if filtered_df.empty:
    st.warning("р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╣Ар╕Зр╕╖р╣Ир╕нр╕Щр╣Др╕В р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Хр╕▒р╕зр╕Бр╕гр╕нр╕З")
else:
    chart = alt.Chart(filtered_df).mark_bar().encode(
        x=alt.X("р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕в:Q", title="р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕в (р╕Ър╕▓р╕Ч/р╣Ар╕Чр╕нр╕б)"),
        y=alt.Y("р╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г:N", sort='-x', title=None,
                axis=alt.Axis(labelFontSize=14)),
        color=alt.Color("р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в:N", legend=None),
        tooltip=["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в", "р╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г", "р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г", "р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕в"]
    ).properties(height=1000)

    st.altair_chart(chart, use_container_width=True)

# ==== DATA TABLE ====
with st.expander("ЁЯУД р╕Хр╕▓р╕гр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г"):
    st.dataframe(
        filtered_df[["р╕бр╕лр╕▓р╕зр╕┤р╕Чр╕вр╕▓р╕ер╕▒р╕в", "р╕Кр╕╖р╣Ир╕нр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г", "р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕в", "р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕ер╕▒р╕Бр╕кр╕╣р╕Хр╕г", "р╕ер╕┤р╕Зр╕Бр╣М"]],
        use_container_width=True
    )
